package ArraySecondClass;

import java.util.Iterator;

public class ArraySecond {
	
	public static int laderInArray(int arr[]) {
		if(arr.length == 0) {
			System.out.println("Given array is empty");
			return 0;
		}
		
		
		int larger = Integer.MIN_VALUE;
		int arr2[] = new int[arr.length];
		int j = 0;
		
		for (int i = arr.length - 1; i >=0; i--) {
			if(arr[i] > larger) {
				larger = arr[i];
				arr2[j] = larger;
				j++;
			}			
		}
		
		for (int i = j - 1; i >= 0; i--) {
			System.out.print(" " + arr2[i]);
		}
				
		return 1;
	}
	
	public static void maximumSumSubArray(int arr[]) {
		if(arr.length == 0) {
			System.out.println("Given array is empty");
		}
		
		int currentSum = 0;
		int maxSum = Integer.MIN_VALUE;
		int startIndex = 0;
		int endIndex = 0;
		
		for (int i = 0; i < arr.length; i++) {
			currentSum += arr[i];
			
			if(currentSum <= -1) {
				startIndex = i + 1;
				currentSum = 0;
			}
			
			if(currentSum > maxSum) {
				maxSum = currentSum;
				endIndex = i;
			}
		}
		
		System.out.println("maximum sum is "+ maxSum);
		System.out.println("Start index "+ startIndex);
		System.out.println("End index "+ endIndex);

	}
	
	public static void containerWithMostWater(int arr[]) {
		if(arr.length == 0) {
			System.out.println("Given array is empty");
		}
		
		int maxWater = Integer.MIN_VALUE;
		int currentWatter = 0;
		int startIndex = 0;
		int endIndex = 0;
		
		for (int i = 0; i < arr.length; i++) {
			for (int j = i; j < arr.length; j++) {
				currentWatter = arr[i] * arr[j];
				
				if(currentWatter > maxWater) {
					startIndex= arr[i];
					endIndex = arr[j];
					maxWater = currentWatter;
				}
			}
		}
		
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {2,7,6,1,4,3};
		int arr[] = {16, 17, 4, 3, 5, 2};
//		int maxSumArr[] = { -2, -3, 4, -1, -2, 1, 5, -3 };
		int maxSumArr[] = { 6, 7, 4, -2, 1, 5, -4};
		int containerArr = { 1, 8, 6, 2, 5, 4, 8, 3, 7};

//		laderInArray(arr);
		maximumSumSubArray(maxSumArr);
	}

}
